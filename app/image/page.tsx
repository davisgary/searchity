'use client';

import { useState } from 'react';
import { CiImageOn } from 'react-icons/ci';

export default function IndexPage() {
  const [imageUrl, setImageUrl] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [prompt, setPrompt] = useState<string>('');

  const handleImageGeneration = async (query: string) => {
    if (!query.trim()) return;

    setLoading(true);
    setError(null);
    setImageUrl(null);

    try {
      const response = await fetch('/api/image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt: query }),
      });

      if (!response.ok) {
        const errorDetails = await response.json();
        throw new Error(errorDetails.error || 'Failed to generate image');
      }
      const data: { imageUrl: string } = await response.json();
      setImageUrl(data.imageUrl);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleDownloadImage = () => {
    if (imageUrl) {
      const link = document.createElement('a');
      link.href = imageUrl;
      link.download = 'generated-image.png';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div className="min-h-screen flex flex-col bg-black text-center text-white">
      <div className="w-full max-w-xl mx-auto flex flex-col items-center justify-start flex-grow px-5 py-24">
        <h1 className="pb-6 font-bold tracking-tight text-3xl sm:text-4xl md:text-5xl">Create AI Images</h1>
        <div className="w-full relative">
          <input
            type="text"
            placeholder="Enter your image..."
            className="w-full px-4 py-3 pr-16 bg-neutral-900 text-white placeholder-neutral-400 rounded shadow-[0_0_4px_rgba(255,255,255,0.6)] focus:outline-none"
            onChange={(e) => setPrompt(e.target.value)}
            value={prompt}
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                handleImageGeneration(prompt);
              }
            }}
          />
          <button
            onClick={() => handleImageGeneration(prompt)}
            disabled={loading}
            className="absolute right-2 bg-black w-8 h-8 rounded flex items-center justify-center disabled:opacity-80 transition-colors duration-200"
            style={{ top: '50%', transform: 'translateY(-50%)' }}
            aria-label="Generate Image"
          >
            <CiImageOn className={`w-5 h-5 ${loading ? 'animate-pulse' : ''}`} />
          </button>
        </div>
        {error && <p className="text-red-500 mt-4">{error}</p>}
        {imageUrl && (
          <div className="mt-5">
            <h3 className="text-lg">Generated Image:</h3>
            <img src={imageUrl} alt="Generated by AI" className="w-full max-w-2xl mx-auto mt-4 border rounded shadow-[0_0_4px_rgba(255,255,255,0.8)]" />
            <button onClick={handleDownloadImage} className="mt-4 px-4 py-2 bg-transparent text-white rounded hover:bg-white hover:text-black transition duration-500 shadow-[0_0_4px_rgba(255,255,255,0.8)]">
              Save Image
            </button>
          </div>
        )}
        {loading && <div className="p-5 text-neutral-400 animate-pulse">Generating image...</div>}
      </div>
      <footer className="py-4 text-xs">
        AI can create amazing images.
      </footer>
    </div>
  );
}